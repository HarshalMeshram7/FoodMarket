# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  ftag: 'frontend$(Build.BuildId)'
  btag: 'backend$(Build.BuildId)'
  repository: 'harshalmeshram/foodmarket'
  deployPath: '/home/ubuntu/foodmart-deploy'
  frontendContainerName: 'foodmarket-frontend'
  backendContainerName: 'foodmarket-backend'
  frontendPort: '5001:5001' 
  backendPort: '5003:5003'
  networkName: "foodmarket-network"

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:

    - task: Docker@2
      inputs:
        containerRegistry: 'Harshal''s DockerHub'
        repository: '$(repository)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/frontend/Dockerfile'
        tags: '$(ftag)'

    - task: Docker@2
      inputs:
        containerRegistry: 'Harshal''s DockerHub'
        repository: '$(repository)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/backend/Dockerfile'
        tags: '$(btag)'

- stage: Deploy
  displayName: Deploy Containers
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: SSH@0
      displayName: 'Deploy Application'
      inputs:
        sshEndpoint: 'main-server-ssh'
        runOptions: 'inline'
        inline: |

            # Create a custom Docker network if it doesn't exist
            echo "Creating Docker network if it doesn't exist..."
            docker network create $(networkName) || true

            # Backend deployment
            echo "Stopping and removing existing backend container..."
            docker stop $(backendContainerName) || true
            docker rm $(backendContainerName) || true
            
            echo "Pulling latest backend image..."
            docker pull $(repository):$(btag)
            
            echo "Starting new backend container..."
            docker run -d \
              --name $(backendContainerName) \
              --network $(networkName) \
              -p $(backendPort) \
              --restart unless-stopped \
              $(repository):$(btag)

            # Frontend deployment
            echo "Stopping and removing existing frontend container..."
            docker stop $(frontendContainerName) || true
            docker rm $(frontendContainerName) || true
            
            echo "Pulling latest frontend image..."
            docker pull $(repository):$(ftag)
            
            echo "Starting new frontend container..."
            docker run -d \
              --name $(frontendContainerName) \
              --network $(networkName) \
              -p $(frontendPort) \
              --restart unless-stopped \
              $(repository):$(ftag)

            
            echo "Cleaning up old images..."
            docker image prune -af
            
            echo "Current running containers:"
            docker ps
        readyTimeout: '20000'