# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  ftag: 'frontend$(Build.BuildId)'
  btag: 'backend$(Build.BuildId)'
  repository: 'harshalmeshram/foodmarket'
  deployPath: '/home/ubuntu/foodmart-deploy'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:

    - task: Docker@2
      inputs:
        containerRegistry: 'Harshal''s DockerHub'
        repository: '$(repository)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/frontend/Dockerfile'
        tags: '$(ftag)'

    - task: Docker@2
      inputs:
        containerRegistry: 'Harshal''s DockerHub'
        repository: '$(repository)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/backend/Dockerfile'
        tags: '$(btag)'

- stage: Deploy
  displayName: Deploy Containers
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: SSH@0
      displayName: 'Deploy Application'
      inputs:
        sshEndpoint: 'main-server-ssh'
        runOptions: 'inline'
        inline: |
          # Set error handling and logging
          set -e
          DEPLOY_LOG="$(pwd)/deploy_$(date +%Y%m%d_%H%M%S).log"
          
          {
            echo "=== Starting Deployment $(date) ==="
            
            # Create deployment directory
            echo "Creating deployment directory..."
            mkdir -p $(deployPath)
            cd $(deployPath)
            
            # Generate dynamic docker-compose.yml
            echo "Generating docker-compose.yml..."
            cat > docker-compose.yml <<EOL
            version: '3.8'
            services:
              backend:
                image: $(repository):$(btag)
                container_name: foodmart-backend
                ports:
                  - "5003:5003"
                networks:
                  - foodmart-net
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

              frontend:
                image: $(repository):$(ftag)
                container_name: foodmart-frontend
                ports:
                  - "5002:5002"
                networks:
                  - foodmart-net
                depends_on:
                  backend:
                    condition: service_healthy
                restart: unless-stopped
            networks:
              foodmart-net:
                driver: bridge
            EOL

            # Cleanup previous deployment
            echo "Cleaning up previous deployment..."
            docker-compose down --rmi local --volumes --remove-orphans || true
            
            # Pull new images (quiet mode to avoid Azure false errors)
            echo "Pulling new container images..."
            docker-compose pull --quiet
            
            # Start new deployment
            echo "Starting containers..."
            docker-compose up -d --force-recreate
            
            # Verify deployment
            echo "Verifying deployment..."
            sleep 10  # Allow containers to initialize
            
            BACKEND_STATUS=$(docker inspect -f '{{.State.Status}}' foodmart-backend)
            FRONTEND_STATUS=$(docker inspect -f '{{.State.Status}}' foodmart-frontend)
            
            if [ "$BACKEND_STATUS" != "running" ] || [ "$FRONTEND_STATUS" != "running" ]; then
              echo "##[error]Deployment failed - containers not running"
              echo "Backend Status: $BACKEND_STATUS"
              echo "Frontend Status: $FRONTEND_STATUS"
              docker-compose logs
              exit 1
            fi
            
            echo "##[section]Deployment successful!"
            echo "Backend: $(docker inspect -f '{{.State.Status}}' foodmart-backend)"
            echo "Frontend: $(docker inspect -f '{{.State.Status}}' foodmart-frontend)"
            
          } > "$DEPLOY_LOG" 2>&1 || {
            echo "##[error]Deployment failed - check $DEPLOY_LOG on server"
            exit 1
          }
          
          # Show last 20 lines of log in pipeline
          tail -n 20 "$DEPLOY_LOG"
        readyTimeout: '20000'